{"version":3,"sources":["assets/logo.png","assets/sunIcon.svg","assets/waterIcon.svg","assets/growthIcon.svg","assets/repottingIcon.svg","assets/propagateByCuttingIcon.svg","assets/toxicIcon.svg","Homepage.js","PageNavigation.js","DisplayAllPlants.js","firebase.js","SearchForSpecificPlant.js","InfoForSpecificPlant.js","PlantSearch.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","sendDataToParent","props","searchPlantsProp","className","onClick","this","Component","PageNavigation","Fragment","currentPageProp","previousPageFunction","Math","ceil","plantsProp","length","plantsPerPage","nextPageProp","DisplayAllPlants","map","eachPlant","index","totalNumberOfPlants","currentPage","previousPage","previousPageProp","plantsPerPageProp","key","showThisPlantProp","scientificName","commonName","image","family","lowLight","mediumLight","highLight","wateringNeeds","humidity","maxGrowthInMetres","propagateByCutting","toxic","alt","repotting","src","nextPageFunction","greyOutArrowsFunction","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","child","storage","SearchForSpecificPlant","state","plantsWithMatch","counter","plant","lengthOfArray","searchQuery","searchQueryProp","plantCommonName","toLowerCase","plantScientificName","includes","console","log","goBackToAllPlantsProp","InfoForSpecificPlant","specificPlantImageProp","altProp","specificPlantScientificNameProp","specificPlantCommonNameProp","specificPlantFamilyProp","sunIcon","lowLightProp","mediumLightProp","highLightProp","waterIcon","wateringNeedsProp","growthIcon","maxGrowthProp","repottingIcon","repottingProp","propagateByCuttingIcon","propagationProp","toxicIcon","toxicProp","PlantSearch","nextPage","setState","elmnt","document","querySelector","scrollTo","documentElement","offsetTop","getUserInput","event","userInput","target","value","saveUserInput","preventDefault","showAllPlants","showSearchForASpecificPlant","showInfoForSpecificPlant","showThisPlant","specificPlantScientificName","specificPlantCommonName","specificPlantImage","specificPlantFamily","toleratesLowLight","toleratesMediumLight","toleratesHighLight","specificPlantWateringNeeds","specificPlantHumidity","specificPlantMaxGrowthInMetres","canPropagateByCutting","isToxic","altTag","repottingNeeds","goBackToAllPlants","element","to","duration","perTick","scrollTop","setTimeout","onSubmit","type","id","placeholder","onChange","totalNumberOfPagesProp","totalPages","greyOutArrows","humidityProp","Footer","logo","App","showPlantSearchComponent","showHomepage","showHomepageComponent","plants","listOfPlantsArray","plantData","listOfPlants","on","response","plantItem","val","individualPlant","push","plantsObject","Object","entries","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56338372.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.61279179.png\";","module.exports = __webpack_public_path__ + \"static/media/sunIcon.10e41d71.svg\";","module.exports = __webpack_public_path__ + \"static/media/waterIcon.2c06fab6.svg\";","module.exports = __webpack_public_path__ + \"static/media/growthIcon.804353f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/repottingIcon.9cd78626.svg\";","module.exports = __webpack_public_path__ + \"static/media/propagateByCuttingIcon.024592f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/toxicIcon.ca49177b.svg\";","import React, { Component } from 'react';\nimport './sass/app.scss';\n\nclass Homepage extends Component {\n\n    sendDataToParent = () => {\n        this.props.searchPlantsProp();\n    }\n\n    render() {\n        // This is the default component that loads first and acts as the \"homepage\".\n        return(\n            <section className=\"homepageContainer\">\n                <div className=\"headerContainer\">\n                    <h1>Keep your houseplants happy.</h1>\n                </div>\n                <div className=\"homepageCopyText\">\n                    <p>Our database contains care info on over 100 of the most common houseplants. Find your plant, save it to your collection, and look up care instructions whenever.</p>\n                    <button className=\"searchForAPlant\" onClick={this.sendDataToParent}>Search for a Plant</button>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport './sass/app.scss';\n\nclass PageNavigation extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"pageNavigation\">\n\n                    <div className=\"backArrow\">\n                        {this.props.currentPageProp === 1 ? <span className=\"greyedOutArrow\" onClick={this.props.previousPageFunction}><i className=\"fas fa-angle-double-left\"></i></span> : <span className=\"backArrowSpan\" onClick={this.props.previousPageFunction}><i className=\"fas fa-angle-double-left\"></i></span>}\n                    </div>\n\n                    <div className=\"forwardArrow\">\n                        {this.props.currentPageProp < Math.ceil(this.props.plantsProp.length / this.props.plantsPerPage) ? <span className=\"forwardArrowSpan\" onClick={this.props.nextPageProp}><i className=\"fas fa-angle-double-right\"></i></span> : <span className=\"greyedOutArrow\" onClick={this.props.nextPageProp}><i className=\"fas fa-angle-double-right\"></i></span>}\n\n                    </div>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default PageNavigation;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport PageNavigation from \"./PageNavigation.js\";\n\nclass DisplayAllPlants extends Component {\n\n    render() {\n        return(\n            <React.Fragment>\n\n                    {/* This block of code goes through my plants state array that I set in App.js, and shows 9 plants per page depending on their index. Each div holds an onClick, where if the user clicks on the plant then it calls the showThisPlant() function from PlantSearch.js, and passes in the plant's care instructions as parameters. */}\n                    {\n                        this.props.plantsProp.map( (eachPlant, index) => {\n                            let totalNumberOfPlants = this.props.plantsProp.length;\n                            let currentPage = this.props.currentPageProp;\n                            let previousPage = this.props.previousPageProp;\n                            let plantsPerPage = this.props.plantsPerPageProp;\n                            let totalPages = Math.ceil(totalNumberOfPlants / plantsPerPage);\n\n                            if ((index + 1) <= currentPage * this.props.plantsPerPageProp && (index + 1) > previousPage * this.props.plantsPerPageProp) {\n                                return (\n                                    <div key={index} className=\"plantContainer\" onClick={ () => this.props.showThisPlantProp(eachPlant.scientificName, eachPlant.commonName, eachPlant.image, eachPlant.family, eachPlant.lowLight, eachPlant.mediumLight, eachPlant.highLight, eachPlant.wateringNeeds, eachPlant.humidity, eachPlant.maxGrowthInMetres, eachPlant.propagateByCutting, eachPlant.toxic, eachPlant.alt, eachPlant.repotting)}>\n                                        <div className=\"plantImageContainer\">\n                                            <img src={eachPlant.image} alt={eachPlant.alt} />\n                                        </div>\n                                        <h3>{eachPlant.scientificName}</h3>\n                                        <h4>{eachPlant.commonName}</h4>\n                                    </div>\n                                )\n                            }\n                        })\n                    } \n\n                {/* This block of code loads the PageNavigation.js component, which allows the user to go back and forward a page depending on how many plants there are total in the array, how many plants to show per page (default set at 9), and which index the plant has in the array. When the user clicks on the arrows, it triggers the functions from PlantSearch.js that increment or decrease the page number state. */}\n                <PageNavigation currentPageProp={this.props.currentPageProp} previousPageProp={this.props.previousPage} nextPageProp={this.props.nextPageFunction} previousPageFunction={this.props.previousPageFunction} greyOutArrowsFunction={this.props.greyOutArrowsFunction} plantsProp={this.props.plantsProp} plantsPerPage={this.props.plantsPerPageProp}>\n                </PageNavigation>\n\n            </React.Fragment>\n        )\n    }\n}\n\nexport default DisplayAllPlants;","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport '@firebase/firestore';\nimport '@firebase/storage';\n\n  // Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA2jvrQtoLHRaf7MBBrw_MVbBvugHW2A-E\",\n    authDomain: \"urban-botany.firebaseapp.com\",\n    databaseURL: \"https://urban-botany.firebaseio.com\",\n    projectId: \"urban-botany\",\n    storageBucket: \"urban-botany.appspot.com\",\n    messagingSenderId: \"43720213145\",\n    appId: \"1:43720213145:web:7e64c7d6d097d91a5dee08\"\n};\n\n\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dbRef = firebase.database().ref();\nexport const listOfPlants = dbRef.child(\"plants\");\nexport const storage = firebase.storage();\n\nexport default dbRef;\n","import React, { Component } from \"react\";\nimport './sass/app.scss';\n\nclass SearchForSpecificPlant extends Component {\n    constructor() {\n        super();\n        this.state = {\n            plantsWithMatch: 0,\n        }\n    }\n\n    render() {\n        let counter = 0;\n                return(\n                <React.Fragment>\n                    {\n                        this.props.plantsProp.map( (plant, index) => {\n                            const lengthOfArray = this.props.plantsProp.length;\n                            const searchQuery = this.props.searchQueryProp;\n                            const plantCommonName = plant.commonName.toLowerCase();\n                            const plantScientificName = plant.scientificName.toLowerCase();\n                            if (plantCommonName.includes(searchQuery) === true || plantScientificName.includes(searchQuery) === true || plant.commonName.includes(searchQuery) === true || plant.scientificName.includes(searchQuery) === true) {\n                                counter = counter + 1;\n                                console.log(\"We found a match\");\n                                counter = counter + 1;\n                                console.log(counter);\n                                return(\n                                    <div key={index} className=\"plantContainer\" onClick={ () => this.props.showThisPlantProp(plant.scientificName, plant.commonName, plant.image, plant.family, plant.lowLight, plant.mediumLight, plant.highLight, plant.wateringNeeds, plant.humidity, plant.maxGrowthInMetres, plant.propagateByCutting, plant.toxic)}>\n                                        <div className=\"plantImageContainer\">\n                                            <img src={plant.image} alt=\"\" />\n                                        </div>\n                                        <h3>{plant.scientificName}</h3>\n                                        <h4>{plant.commonName}</h4>\n                                    </div>\n                                );\n                            };\n                            if (lengthOfArray === index + 1 && counter === 0) {\n                                return(\n                                    <h3>Our database does not have any info on the plant you searched. Please try again. You might get more accurate results if you search using the plant's scientific name.</h3>\n                                )\n                            }\n                            if (counter >= lengthOfArray) {\n                                this.props.goBackToAllPlantsProp();\n                            }\n                        })\n                    }\n\n                </React.Fragment>\n            )\n        }\n    }\n\nexport default SearchForSpecificPlant;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport sunIcon from \"./assets/sunIcon.svg\";\nimport waterIcon from \"./assets/waterIcon.svg\";\nimport growthIcon from \"./assets/growthIcon.svg\";\nimport repottingIcon from \"./assets/repottingIcon.svg\";\nimport propagateByCuttingIcon from \"./assets/propagateByCuttingIcon.svg\";\nimport toxicIcon from \"./assets/toxicIcon.svg\";\n\n// This component loads info from DisplayAllPlants() that's passed down as props. It plugs those props into different divs and spans to show care instructions about the plant to the user.\n\nclass InfoForSpecificPlant extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <h2 className=\"goBackToAllPlants\" onClick={this.props.goBackToAllPlantsProp}>Go Back To All Plants</h2>\n                    <div className=\"plantInfoContainer\">\n                        <div className=\"plantInfoImageContainer\">\n                            <img src={this.props.specificPlantImageProp} alt={this.props.altProp} />\n                        </div>\n                        <div className=\"plantInfoText\">\n                            <h3>{this.props.specificPlantScientificNameProp}</h3>\n                            <h4>{this.props.specificPlantCommonNameProp}</h4>\n                            <p>Family: {this.props.specificPlantFamilyProp}</p>\n                            <div className=\"infoGrid\">\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={sunIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Light Toleration</span>\n                                    {this.props.lowLightProp ? <span className=\"dataText\">Low Light</span> : null}\n                                    {this.props.mediumLightProp ? <span className=\"dataText\">Medium Light</span> : null}\n                                    {this.props.highLightProp ? <span className=\"dataText\">High Light</span> : null}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={waterIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Watering Frequency</span>\n                                    {this.props.wateringNeedsProp.includes(\"low\") ? <span className=\"dataText\">Every couple weeks</span> : null}\n                                    {this.props.wateringNeedsProp.includes(\"medium\") ? <span className=\"dataText\">Once a week</span> : null}\n                                    {this.props.wateringNeedsProp.includes(\"high\") ? <span className=\"dataText\">Every five days</span> : null}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={growthIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Max Growth</span>\n                                    {this.props.maxGrowthProp === 1 ? <span className=\"dataText\">{this.props.maxGrowthProp} metre</span> : <span className=\"dataText\">{this.props.maxGrowthProp} metres</span>}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={repottingIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Repotting</span>\n                                    {this.props.repottingProp ? <span className=\"dataText\">{this.props.repottingProp}</span> : <span className=\"dataText\">We don't have this info yet.</span>}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={propagateByCuttingIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Propagation</span>\n                                    {this.props.propagationProp ? <span className=\"dataText\">Propagate by cutting</span> : <span className=\"dataText\">Cannot be propagated by cutting</span>}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={toxicIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Toxicity</span>\n                                    {this.props.toxicProp ? <span className=\"dataText\">Toxic for pets</span> : <span className=\"dataText\">Safe for pets</span>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default InfoForSpecificPlant;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport DisplayAllPlants from './DisplayAllPlants.js';\nimport dbRef from \"./firebase.js\";\nimport SearchForSpecificPlant from \"./SearchForSpecificPlant.js\";\nimport InfoForSpecificPlant from \"./InfoForSpecificPlant.js\";\n\n// The constructor in this component holds all the info I need if the user wants care instructions for a plant. I load the data from my database into App.js, and then I can use the plants state (an array) and pass in data from my state into a function (showThisPlant()) that waits for an on-click to pass this data down to the InfoForSpecificPlant.js component.\n\nclass PlantSearch extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showAllPlants: true,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            showInfoForSpecificPlant: false,\n            specificPlantScientificName: \"\",\n            specificPlantCommonName: \"\",\n            specificPlantImage: \"\",\n            specificPlantFamily: \"\",\n            toleratesLowLight: null, \n            toleratesMediumLight: null,\n            toleratesHighLight: null,\n            specificPlantWateringNeeds: \"\",\n            specificPlantHumidity: \"\",\n            specificPlantMaxGrowthInMetres: null,\n            canPropagateByCutting: null,\n            isToxic: null,\n            repotting: null,\n            altTag: \"\",\n            currentPage: 1,\n            previousPage: 0,\n            plantsPerPage: 9,\n        };\n    }\n\n    nextPage = () => {\n        let totalNumberOfPlants = this.props.plantsProp.length;\n        let plantsPerPage = this.state.plantsPerPage;\n        if (this.state.currentPage < Math.ceil(totalNumberOfPlants / plantsPerPage)) {\n            this.setState({\n                currentPage: this.state.currentPage + 1,\n                previousPage: this.state.previousPage + 1,\n            })\n            let elmnt = document.querySelector(\".searchBar\");\n            this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n        };\n    }\n\n    previousPage = () => {\n        if (this.state.currentPage !== 1) {\n            this.setState({\n                currentPage: this.state.currentPage - 1,\n                previousPage: this.state.previousPage -1,\n            })\n            let elmnt = document.querySelector(\".searchBar\");\n            this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n        } else {\n            this.setState({\n                currentPage: 1,\n                previousPage: 0,\n            })\n        }\n    }\n\n    getUserInput = (event) => {\n        this.setState({\n            userInput: event.target.value,\n        })\n    }\n\n    saveUserInput = (event) => {\n        event.preventDefault();\n        const searchQuery = this.state.userInput;\n        if (searchQuery !== \"\") {\n            this.setState({\n                showAllPlants: false,\n                showSearchForASpecificPlant: true,\n                showInfoForSpecificPlant: false,\n            })\n        }\n    }\n\n    showThisPlant = (scientificName, commonName, image, family, lowLight, mediumLight, highLight, wateringNeeds, humidity, maxGrowthInMetres, propagateByCutting, toxic, alt, repotting) => {\n        let elmnt = document.querySelector(\".searchBar\");\n        this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n        this.setState({\n            showInfoForSpecificPlant: true,\n            showAllPlants: false,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            specificPlantScientificName: scientificName,\n            specificPlantCommonName: commonName,\n            specificPlantImage: image,\n            specificPlantFamily: family,\n            toleratesLowLight: lowLight, \n            toleratesMediumLight: mediumLight,\n            toleratesHighLight: highLight,\n            specificPlantWateringNeeds: wateringNeeds,\n            specificPlantHumidity: humidity,\n            specificPlantMaxGrowthInMetres: maxGrowthInMetres,\n            canPropagateByCutting: propagateByCutting,\n            isToxic: toxic,\n            altTag: alt,\n            repottingNeeds: repotting,\n        })\n    }\n\n\n    // When the user clicks on a plant for care instructions, there's a button on the top they can click on to go back to the list of all plants. It's controlled by the states set below and is triggered by an on-click.\n    goBackToAllPlants = () => {\n        this.setState({\n            showInfoForSpecificPlant: false,\n            showAllPlants: true,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            specificPlantScientificName: \"\",\n            specificPlantCommonName: \"\",\n            specificPlantImage: \"\",\n            specificPlantFamily: \"\",\n        })\n    }\n\n    scrollTo = (element, to, duration) => {\n        if (duration <= 0) return;\n        const difference = to - element.scrollTop;\n        const perTick = difference / duration * 10;\n    \n        setTimeout( () => {\n            element.scrollTop = element.scrollTop + perTick;\n            if (element.scrollTop === to) return;\n            this.scrollTo(element, to, duration - 10);\n        }, 10);\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"plantSearchContainer\">\n                    <div className=\"plantSearchHeader\">\n                        <h1>Search for a Plant</h1>\n                        <p>The Urban Botany database contains care instructions for over 100 of the most common houseplants, so you know how to give your plant the optimal care it deserves. Simply search either by scientific name or by common name, and if we have care info for that plant we’ll share all of our knowledge with you.</p>\n                    </div>\n                    {/* This is where I save the user's search input so I can pass it to my state and reiterate through my dataset to see if there's a match for a plant they searched. */}\n                    <div className=\"searchBar\">\n                        <form onSubmit={this.saveUserInput}>\n                            <input type=\"text\" className=\"plantSearchInput\" id=\"plantQuery\" placeholder=\"Search for a Plant\" onChange={this.getUserInput}></input>\n                            <button type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                        </form>\n                    </div>\n\n                    <div className=\"searchResults\">\n\n                        {/* The DisplayAllPlants.js componenent relies on the state of showAllPlants to be true for it to show. It passes down the function that allows the user to click on a certain plant for more details (showThisPlantProp), states that indicate the current page and previous page, and functions that allow the user to navigate through \"pages\". The app only shows nine plants per page. */}\n                        {this.state.showAllPlants ? <div className=\"displayAllPlantsContainer\"><div className=\"searchResultsHeader\"><h2>Displaying All Plants</h2></div><DisplayAllPlants plantsProp={this.props.plantsProp} showThisPlantProp={this.showThisPlant} plantsPerPageProp={this.state.plantsPerPage} currentPageProp={this.state.currentPage} previousPageProp={this.state.previousPage} totalNumberOfPagesProp={this.state.totalPages} nextPageFunction={this.nextPage} previousPageFunction={this.previousPage} greyOutArrowsFunction={this.greyOutArrows} /></div> : null}\n\n                        {/* This block of code determines whether or not the SearchForSpecificPlant.js component should show, depending on the state of showSearchForASpecificPlant being true or false. It passes down the user's search query as a prop, the function to show a specific plant (showThisPlant()), and the ability to go back to Display All Plants. */}\n\n                        {this.state.showSearchForASpecificPlant ? <div className=\"displayAllPlantsContainer\"><div className=\"searchResultsHeader\"><h2>Displaying search results for {this.state.userInput}</h2></div><SearchForSpecificPlant searchQueryProp={this.state.userInput} plantsProp={this.props.plantsProp} showThisPlantProp={this.showThisPlant} goBackToAllPlantsProp={this.goBackToAllPlants} /></div> : null}\n\n\n                        {/* The following block of code allows the user to click on a specific plant and loads its data from the plants array I have as a state in App.js (which holds all my data from Firebase). It passes down all the info for that specific plant as props. */}\n\n                        {this.state.showInfoForSpecificPlant ? <InfoForSpecificPlant specificPlantScientificNameProp={this.state.specificPlantScientificName} specificPlantCommonNameProp={this.state.specificPlantCommonName} specificPlantImageProp={this.state.specificPlantImage} specificPlantFamilyProp={this.state.specificPlantFamily} goBackToAllPlantsProp={this.goBackToAllPlants} lowLightProp={this.state.toleratesLowLight} mediumLightProp={this.state.toleratesMediumLight} highLightProp={this.state.toleratesHighLight} wateringNeedsProp={this.state.specificPlantWateringNeeds} humidityProp={this.state.specificPlantHumidity} maxGrowthProp={this.state.specificPlantMaxGrowthInMetres} propagationProp={this.state.canPropagateByCutting} toxicProp={this.state.isToxic} altProp={this.state.altTag} repottingProp={this.state.repottingNeeds} / > : null}\n                    </div>\n\n                </div>\n            </React.Fragment>\n\n        ) \n    }\n};\n\nexport default PlantSearch;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport logo from \"./assets/logo.png\";\n\nclass Footer extends Component{\n\n    render() {\n        return(\n            <React.Fragment>\n                <footer>\n                    <div className=\"footerContainer wrapper\">\n\n                        <div className=\"footerTextContainer\">\n                            <div className=\"footerLogoContainer\">\n                                <img src={logo} alt=\"\"></img>\n                            </div>\n                            <div className=\"footerText\">\n                                <p>Urban Botany is a small web-based app built and designed by Sandy Pranjic using React and Firebase. It was built with the intention of encouraging others to take up caring for houseplants as a hobby in hopes of reigniting people’s connection to Mother Nature.</p>\n                            </div>\n                        </div>\n\n                    </div>\n                </footer>\n\n\n\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport logo from \"./assets/logo.png\"\nimport Homepage from \"./Homepage.js\";\nimport PlantSearch from \"./PlantSearch.js\";\nimport listOfPlants from \"./firebase.js\";\nimport Footer from \"./Footer\";\n\n\n// Which components show depend on how different states are set\n// The plants array in my constructor holds all the plant data that I load from Firebase\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showHomepage: true,\n      showPlantSearchComponent: false,\n      plants: [],\n    }\n  }\n\n  showPlantSearchComponent = () => {\n    this.setState({\n      showPlantSearchComponent: true,\n      showHomepage: false,\n    });\n  }\n\n  showHomepageComponent = () => {\n    this.setState({\n      showPlantSearchComponent: false,\n      showHomepage: true,\n    });\n  }\n\n  componentDidMount() {\n\n    // The following event listener listens to my database for any change and pushes each object from my database into my plants array in the state, which allows me to utilize said data and loop through it.\n\n    const listOfPlantsArray = [];\n    const plantData = [];\n    listOfPlants.on(\"value\", (response) => {\n        const plantItem = response.val();\n        for (let individualPlant in plantItem) {\n            listOfPlantsArray.push(plantItem[individualPlant]);\n        }\n        const plantsObject = listOfPlantsArray[0];\n        Object.entries(plantsObject).map(([key, value]) => {\n          const innerPlantObject = [key, value];\n          const plant = innerPlantObject[1];\n\n          plantData.push({scientificName: plant.scientificName, commonName: plant.commonName, family: plant.family, toxic: plant.toxic, wateringNeeds: plant.wateringNeeds, humidity: plant.humidity, lowLight: plant.lowLight, mediumLight: plant.mediumLight, highLight: plant.highLight, propagateByCutting: plant.propagateByCutting, maxGrowthInMetres: plant.maxGrowthInMetres, image: plant.image, alt: plant.alt, repotting: plant.repotting});\n\n          this.setState({\n            plants: plantData\n          })\n        })\n      })\n  }\n\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"wrapper\">\n          <div className=\"logoContainer\">\n            <img src={logo} alt=\"\" onClick={this.showHomepageComponent}></img>\n          </div>\n          <nav className=\"topNav\">\n            <ul>\n              <li onClick={this.showPlantSearchComponent}>Search Plants</li>\n            </ul>\n          </nav>\n        </header>\n        <main className=\"wrapper\">\n          {this.state.showHomepage ? <Homepage searchPlantsProp={this.showPlantSearchComponent} /> : null}\n          {this.state.showPlantSearchComponent ? <PlantSearch plantsProp={this.state.plants} /> : null}\n        </main>\n\n        {this.state.showHomepage ? null : <Footer />}\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}