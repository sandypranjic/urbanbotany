{"version":3,"sources":["assets/logo.png","assets/sunIcon.svg","assets/waterIcon.svg","assets/growthIcon.svg","assets/repottingIcon.svg","assets/propagateByCuttingIcon.svg","assets/toxicIcon.svg","firebase.js","Homepage.js","PageNavigation.js","DisplayAllPlants.js","SearchForSpecificPlant.js","InfoForSpecificPlant.js","PlantSearch.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","provider","auth","GoogleAuthProvider","child","storage","Homepage","sendDataToParent","props","searchPlantsProp","className","onClick","this","Component","PageNavigation","Fragment","currentPageProp","previousPageFunction","Math","ceil","plantsProp","length","plantsPerPage","nextPageProp","DisplayAllPlants","map","eachPlant","index","totalNumberOfPlants","currentPage","previousPage","previousPageProp","plantsPerPageProp","totalPages","console","log","key","showThisPlantProp","scientificName","commonName","image","family","lowLight","mediumLight","highLight","wateringNeeds","humidity","maxGrowthInMetres","propagateByCutting","toxic","src","alt","nextPageFunction","greyOutArrowsFunction","SearchForSpecificPlant","state","plantsWithMatch","counter","plant","lengthOfArray","searchQuery","searchQueryProp","plantCommonName","toLowerCase","plantScientificName","includes","goBackToAllPlantsProp","InfoForSpecificPlant","specificPlantImageProp","specificPlantScientificNameProp","specificPlantCommonNameProp","specificPlantFamilyProp","sunIcon","lowLightProp","mediumLightProp","highLightProp","waterIcon","wateringNeedsProp","growthIcon","maxGrowthProp","class","repottingIcon","propagateByCuttingIcon","propagationProp","toxicIcon","toxicProp","PlantSearch","nextPage","setState","elmnt","document","querySelector","scrollTo","documentElement","offsetTop","getUserInput","event","userInput","target","value","saveUserInput","preventDefault","showAllPlants","showSearchForASpecificPlant","showInfoForSpecificPlant","showThisPlant","specificPlantScientificName","specificPlantCommonName","specificPlantImage","specificPlantFamily","toleratesLowLight","toleratesMediumLight","toleratesHighLight","specificPlantWateringNeeds","specificPlantHumidity","specificPlantMaxGrowthInMetres","canPropagateByCutting","isToxic","goBackToAllPlants","element","to","duration","perTick","scrollTop","setTimeout","onSubmit","type","id","placeholder","onChange","totalNumberOfPagesProp","greyOutArrows","humidityProp","Footer","logo","App","login","signInWithPopup","then","result","username","user","uid","currentUser","displayName","userId","userName","logout","signOut","showPlantSearchComponent","showHomepage","showHomepageComponent","getUserInfo","listOfUsersArray","users","on","userData","listOfUsers","val","eachUser","push","usersObject","Object","entries","innerDataObject","databaseUserKey","authenticationUserId","plants","onAuthStateChanged","listOfPlantsArray","plantData","listOfPlants","response","plantItem","individualPlant","plantsObject","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,uBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,oD,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iOCmB3CC,IAASC,cAZc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,cACnBC,MAAO,6CAOX,IAAMC,EAAQT,IAASU,WAAWC,MACrBC,EAAW,IAAIZ,IAASa,KAAKC,mBAC7BD,EAAOb,IAASa,OAKdJ,GAJaA,EAAMM,MAAM,UACnBN,EAAMM,MAAM,SACVf,IAASgB,UAEjBP,G,wBCHAQ,E,2MApBXC,iBAAmB,WACf,EAAKC,MAAMC,oB,wEAKX,OACI,6BAASC,UAAU,qBACf,yBAAKA,UAAU,mBACX,6DAEJ,yBAAKA,UAAU,oBACX,+LACA,4BAAQA,UAAU,kBAAkBC,QAASC,KAAKL,kBAAlD,4B,GAfGM,aCqBRC,E,iLAnBP,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKL,UAAU,kBAEX,yBAAKA,UAAU,aACqB,IAA/BE,KAAKJ,MAAMQ,gBAAwB,0BAAMN,UAAU,iBAAiBC,QAASC,KAAKJ,MAAMS,sBAAsB,uBAAGP,UAAU,8BAAyC,0BAAMA,UAAU,gBAAgBC,QAASC,KAAKJ,MAAMS,sBAAsB,uBAAGP,UAAU,+BAGhQ,yBAAKA,UAAU,gBACVE,KAAKJ,MAAMQ,gBAAkBE,KAAKC,KAAKP,KAAKJ,MAAMY,WAAWC,OAAST,KAAKJ,MAAMc,eAAiB,0BAAMZ,UAAU,mBAAmBC,QAASC,KAAKJ,MAAMe,cAAc,uBAAGb,UAAU,+BAA0C,0BAAMA,UAAU,iBAAiBC,QAASC,KAAKJ,MAAMe,cAAc,uBAAGb,UAAU,sC,GAX1SG,aCsCdW,E,iLAnCD,IAAD,OACL,OACI,kBAAC,IAAMT,SAAP,KAGYH,KAAKJ,MAAMY,WAAWK,KAAK,SAACC,EAAWC,GACnC,IAAIC,EAAsB,EAAKpB,MAAMY,WAAWC,OAC5CQ,EAAc,EAAKrB,MAAMQ,gBACzBc,EAAe,EAAKtB,MAAMuB,iBAC1BT,EAAgB,EAAKd,MAAMwB,kBAC3BC,EAAaf,KAAKC,KAAKS,EAAsBN,GAGjD,GAFAY,QAAQC,IAAIP,EAAqBC,EAAaP,EAAeW,GAExDN,EAAQ,GAAME,EAAe,EAAKrB,MAAMwB,mBAAsBL,EAAQ,EAAKG,EAAe,EAAKtB,MAAMwB,kBACtG,OACI,yBAAKI,IAAKT,EAAOjB,UAAU,iBAAiBC,QAAU,kBAAM,EAAKH,MAAM6B,kBAAkBX,EAAUY,eAAgBZ,EAAUa,WAAYb,EAAUc,MAAOd,EAAUe,OAAQf,EAAUgB,SAAUhB,EAAUiB,YAAajB,EAAUkB,UAAWlB,EAAUmB,cAAenB,EAAUoB,SAAUpB,EAAUqB,kBAAmBrB,EAAUsB,mBAAoBtB,EAAUuB,SAC1V,yBAAKvC,UAAU,uBACX,yBAAKwC,IAAKxB,EAAUc,MAAOW,IAAI,MAEnC,4BAAKzB,EAAUY,gBACf,4BAAKZ,EAAUa,gBAOvC,kBAAC,EAAD,CAAgBvB,gBAAiBJ,KAAKJ,MAAMQ,gBAAiBe,iBAAkBnB,KAAKJ,MAAMsB,aAAcP,aAAcX,KAAKJ,MAAM4C,iBAAkBnC,qBAAsBL,KAAKJ,MAAMS,qBAAsBoC,sBAAuBzC,KAAKJ,MAAM6C,sBAAuBjC,WAAYR,KAAKJ,MAAMY,WAAYE,cAAeV,KAAKJ,MAAMwB,yB,GA7BjTnB,aCgDhByC,E,YAhDX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,gBAAiB,GAHX,E,sEAOJ,IAAD,OACDC,EAAU,EACN,OACA,kBAAC,IAAM1C,SAAP,KAEQH,KAAKJ,MAAMY,WAAWK,KAAK,SAACiC,EAAO/B,GAC/B,IAAMgC,EAAgB,EAAKnD,MAAMY,WAAWC,OACtCuC,EAAc,EAAKpD,MAAMqD,gBACzBC,EAAkBJ,EAAMnB,WAAWwB,cACnCC,EAAsBN,EAAMpB,eAAeyB,cACjD,OAA8C,IAA1CD,EAAgBG,SAASL,KAAuE,IAA9CI,EAAoBC,SAASL,KAAoE,IAA3CF,EAAMnB,WAAW0B,SAASL,KAAwE,IAA/CF,EAAMpB,eAAe2B,SAASL,IACzLH,GAAoB,EACpBvB,QAAQC,IAAI,oBACZsB,GAAoB,EACpBvB,QAAQC,IAAIsB,GAER,yBAAKrB,IAAKT,EAAOjB,UAAU,iBAAiBC,QAAU,kBAAM,EAAKH,MAAM6B,kBAAkBqB,EAAMpB,eAAgBoB,EAAMnB,WAAYmB,EAAMlB,MAAOkB,EAAMjB,OAAQiB,EAAMhB,SAAUgB,EAAMf,YAAae,EAAMd,UAAWc,EAAMb,cAAea,EAAMZ,SAAUY,EAAMX,kBAAmBW,EAAMV,mBAAoBU,EAAMT,SAC1S,yBAAKvC,UAAU,uBACX,yBAAKwC,IAAKQ,EAAMlB,MAAOW,IAAI,MAE/B,4BAAKO,EAAMpB,gBACX,4BAAKoB,EAAMnB,cAInBoB,IAAkBhC,EAAQ,GAAiB,IAAZ8B,EAE3B,0MAGJA,GAAWE,GACX,EAAKnD,MAAM0D,iC,GAvCNrD,a,sGC8DtBsD,E,iLAtDP,OACI,kBAAC,IAAMpD,SAAP,KACI,wBAAIL,UAAU,oBAAoBC,QAASC,KAAKJ,MAAM0D,uBAAtD,yBACI,yBAAKxD,UAAU,sBACX,yBAAKA,UAAU,2BACX,yBAAKwC,IAAKtC,KAAKJ,MAAM4D,uBAAwBjB,IAAI,MAErD,yBAAKzC,UAAU,iBACX,4BAAKE,KAAKJ,MAAM6D,iCAChB,4BAAKzD,KAAKJ,MAAM8D,6BAChB,sCAAY1D,KAAKJ,MAAM+D,yBACvB,yBAAK7D,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAKsB,IAASrB,IAAI,MAClD,0BAAMzC,UAAU,aAAhB,oBACCE,KAAKJ,MAAMiE,aAAe,0BAAM/D,UAAU,YAAhB,aAA8C,KACxEE,KAAKJ,MAAMkE,gBAAkB,0BAAMhE,UAAU,YAAhB,gBAAiD,KAC9EE,KAAKJ,MAAMmE,cAAgB,0BAAMjE,UAAU,YAAhB,cAA+C,MAE/E,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAK0B,IAAWzB,IAAI,MACpD,0BAAMzC,UAAU,aAAhB,sBACCE,KAAKJ,MAAMqE,kBAAkBZ,SAAS,OAAS,0BAAMvD,UAAU,YAAhB,sBAAuD,KACtGE,KAAKJ,MAAMqE,kBAAkBZ,SAAS,UAAY,0BAAMvD,UAAU,YAAhB,eAAgD,KAClGE,KAAKJ,MAAMqE,kBAAkBZ,SAAS,QAAU,0BAAMvD,UAAU,YAAhB,mBAAoD,MAEzG,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAK4B,IAAY3B,IAAI,MACrD,0BAAMzC,UAAU,aAAhB,cAC8B,IAA7BE,KAAKJ,MAAMuE,cAAsB,0BAAMC,MAAM,YAAYpE,KAAKJ,MAAMuE,cAAnC,UAAiE,0BAAMC,MAAM,YAAYpE,KAAKJ,MAAMuE,cAAnC,YAEvG,yBAAKrE,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAK+B,IAAe9B,IAAI,MACxD,0BAAMzC,UAAU,aAAhB,cAGJ,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAKgC,IAAwB/B,IAAI,MACjE,0BAAMzC,UAAU,aAAhB,eACCE,KAAKJ,MAAM2E,gBAAkB,0BAAMH,MAAM,YAAZ,wBAAqD,0BAAMA,MAAM,YAAZ,oCAEvF,yBAAKtE,UAAU,aACX,yBAAKA,UAAU,aAAY,yBAAKwC,IAAKkC,IAAWjC,IAAI,MACpD,0BAAMzC,UAAU,aAAhB,YACCE,KAAKJ,MAAM6E,UAAY,0BAAML,MAAM,YAAZ,kBAA+C,0BAAMA,MAAM,YAAZ,0B,GA9CxEnE,aC0JpByE,E,YA3JX,aAAe,IAAD,8BACV,+CAwBJC,SAAW,WACP,IAAI3D,EAAsB,EAAKpB,MAAMY,WAAWC,OAC5CC,EAAgB,EAAKiC,MAAMjC,cAC/B,GAAI,EAAKiC,MAAM1B,YAAcX,KAAKC,KAAKS,EAAsBN,GAAgB,CACzE,EAAKkE,SAAS,CACV3D,YAAa,EAAK0B,MAAM1B,YAAc,EACtCC,aAAc,EAAKyB,MAAMzB,aAAe,IAE5C,IAAI2D,EAAQC,SAASC,cAAc,cACnC,EAAKC,SAASF,SAASG,gBAAiBJ,EAAMK,UAAW,OAlCnD,EAsCdhE,aAAe,WACX,GAA+B,IAA3B,EAAKyB,MAAM1B,YAAmB,CAC9B,EAAK2D,SAAS,CACV3D,YAAa,EAAK0B,MAAM1B,YAAc,EACtCC,aAAc,EAAKyB,MAAMzB,aAAc,IAE3C,IAAI2D,EAAQC,SAASC,cAAc,cACnC,EAAKC,SAASF,SAASG,gBAAiBJ,EAAMK,UAAW,UAEzD,EAAKN,SAAS,CACV3D,YAAa,EACbC,aAAc,KAjDZ,EAsDdiE,aAAe,SAACC,GACZ,EAAKR,SAAS,CACVS,UAAWD,EAAME,OAAOC,SAxDlB,EA4DdC,cAAgB,SAACJ,GACbA,EAAMK,iBACN,IAAMzC,EAAc,EAAKL,MAAM0C,UACX,KAAhBrC,IACA1B,QAAQC,IAAIyB,GACZ,EAAK4B,SAAS,CACVc,eAAe,EACfC,6BAA6B,EAC7BC,0BAA0B,MApExB,EAyEdC,cAAgB,SAACnE,EAAgBC,EAAYC,EAAOC,EAAQC,EAAUC,EAAaC,EAAWC,EAAeC,EAAUC,EAAmBC,EAAoBC,GAC1J,EAAKuC,SAAS,CACVgB,0BAA0B,EAC1BF,eAAe,EACfC,6BAA6B,EAC7BN,UAAW,GACXS,4BAA6BpE,EAC7BqE,wBAAyBpE,EACzBqE,mBAAoBpE,EACpBqE,oBAAqBpE,EACrBqE,kBAAmBpE,EACnBqE,qBAAsBpE,EACtBqE,mBAAoBpE,EACpBqE,2BAA4BpE,EAC5BqE,sBAAuBpE,EACvBqE,+BAAgCpE,EAChCqE,sBAAuBpE,EACvBqE,QAASpE,IAEbf,QAAQC,IAAIG,EAAgBC,EAAYC,EAAOC,GAC/C,IAAIgD,EAAQC,SAASC,cAAc,cACnC,EAAKC,SAASF,SAASG,gBAAiBJ,EAAMK,UAAW,MA9F/C,EAiGdwB,kBAAoB,WAChB,EAAK9B,SAAS,CACVgB,0BAA0B,EAC1BF,eAAe,EACfC,6BAA6B,EAC7BN,UAAW,GACXS,4BAA6B,GAC7BC,wBAAyB,GACzBC,mBAAoB,GACpBC,oBAAqB,MA1Gf,EA8GdjB,SAAW,SAAC2B,EAASC,EAAIC,GACrB,KAAIA,GAAY,GAAhB,CACA,IACMC,GADaF,EAAKD,EAAQI,WACHF,EAAW,GAExCG,YAAY,WACRL,EAAQI,UAAYJ,EAAQI,UAAYD,EACpCH,EAAQI,YAAcH,GAC1B,EAAK5B,SAAS2B,EAASC,EAAIC,EAAW,MACvC,MArHH,EAAKlE,MAAQ,CACT+C,eAAe,EACfC,6BAA6B,EAC7BN,UAAW,GACXO,0BAA0B,EAC1BE,4BAA6B,GAC7BC,wBAAyB,GACzBC,mBAAoB,GACpBC,oBAAqB,GACrBC,kBAAmB,KACnBC,qBAAsB,KACtBC,mBAAoB,KACpBC,2BAA4B,GAC5BC,sBAAuB,GACvBC,+BAAgC,KAChCC,sBAAuB,KACvBC,QAAS,KACTxF,YAAa,EACbC,aAAc,EACdR,cAAe,GArBT,E,sEA4HV,OADAY,QAAQC,IAAIrC,GAER,kBAAC,IAAMiB,SAAP,KACI,yBAAKL,UAAU,wBACX,yBAAKA,UAAU,qBACX,kDACA,6oBAEJ,yBAAKA,UAAU,aACX,0BAAMmH,SAAUjH,KAAKwF,eACjB,2BAAO0B,KAAK,OAAOpH,UAAU,mBAAmBqH,GAAG,aAAaC,YAAY,qBAAqBC,SAAUrH,KAAKmF,eAChH,4BAAQ+B,KAAK,UAAS,uBAAGpH,UAAU,qBAI3C,yBAAKA,UAAU,iBAEVE,KAAK2C,MAAM+C,cAAgB,yBAAK5F,UAAU,6BAA4B,yBAAKA,UAAU,uBAAsB,sDAAoC,kBAAC,EAAD,CAAkBU,WAAYR,KAAKJ,MAAMY,WAAYiB,kBAAmBzB,KAAK6F,cAAezE,kBAAmBpB,KAAK2C,MAAMjC,cAAeN,gBAAiBJ,KAAK2C,MAAM1B,YAAaE,iBAAkBnB,KAAK2C,MAAMzB,aAAcoG,uBAAwBtH,KAAK2C,MAAMtB,WAAYmB,iBAAkBxC,KAAK2E,SAAUtE,qBAAsBL,KAAKkB,aAAcuB,sBAAuBzC,KAAKuH,iBAA0B,KAE3hBvH,KAAK2C,MAAMgD,4BAA8B,yBAAK7F,UAAU,6BAA4B,yBAAKA,UAAU,uBAAsB,6DAAmCE,KAAK2C,MAAM0C,YAAqB,kBAAC,EAAD,CAAwBpC,gBAAiBjD,KAAK2C,MAAM0C,UAAW7E,WAAYR,KAAKJ,MAAMY,WAAYiB,kBAAmBzB,KAAK6F,cAAevC,sBAAuBtD,KAAK0G,qBAA8B,KAG/X1G,KAAK2C,MAAMiD,yBAA2B,kBAAC,EAAD,CAAsBnC,gCAAiCzD,KAAK2C,MAAMmD,4BAA6BpC,4BAA6B1D,KAAK2C,MAAMoD,wBAAyBvC,uBAAwBxD,KAAK2C,MAAMqD,mBAAoBrC,wBAAyB3D,KAAK2C,MAAMsD,oBAAqB3C,sBAAuBtD,KAAK0G,kBAAmB7C,aAAc7D,KAAK2C,MAAMuD,kBAAmBpC,gBAAiB9D,KAAK2C,MAAMwD,qBAAsBpC,cAAe/D,KAAK2C,MAAMyD,mBAAoBnC,kBAAmBjE,KAAK2C,MAAM0D,2BAA4BmB,aAAcxH,KAAK2C,MAAM2D,sBAAuBnC,cAAenE,KAAK2C,MAAM4D,+BAAgChC,gBAAiBvE,KAAK2C,MAAM6D,sBAAuB/B,UAAWzE,KAAK2C,MAAM8D,UAAe,Y,GAlJ5uBxG,aCyBXwH,E,iLAzBP,OACI,kBAAC,IAAMtH,SAAP,KACI,gCACI,yBAAKL,UAAU,2BAEX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,uBACX,yBAAKwC,IAAKoF,IAAMnF,IAAI,MAExB,yBAAKzC,UAAU,cACX,oU,GAbXG,aCsLN0H,E,YA9Kb,aAAe,IAAD,8BACZ,+CAYFC,MAAQ,WACNtI,EAAKuI,gBAAgBxI,GAClByI,MAAK,SAACC,GACL,IAAMC,EAAWD,EAAOE,KACxB3G,QAAQC,IAAIwG,GACZ,EAAKnD,SAAS,CACZqD,KAAMD,IAER,IACIE,EADAD,EAAO3I,EAAK6I,YAGhB,GAAY,MAARF,EAAc,CAChBC,EAAMD,EAAKC,IACX,IAAIE,EAAcH,EAAKG,YACvB,EAAKxD,SAAS,CACZyD,OAAQH,EACRI,SAAUF,SA7BN,EAqCdG,OAAU,WACRjJ,EAAKkJ,UACFV,MAAK,WACJ,EAAKlD,SAAS,CACZqD,KAAM,KACNI,OAAQ,KACRF,YAAa,WA3CP,EAgDdM,yBAA2B,WACzB,EAAK7D,SAAS,CACZ6D,0BAA0B,EAC1BC,cAAc,KAnDJ,EAwDdC,sBAAwB,WACtB,EAAK/D,SAAS,CACZ6D,0BAA0B,EAC1BC,cAAc,KA3DJ,EAgEdE,YAAc,WACZ,IAAMC,EAAmB,GAGzBC,EAAMC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAcD,EAASE,MAC7B,IAAK,IAAIC,KAAYF,EACnB3H,QAAQC,IAAI4H,GACZN,EAAiBO,KAAKH,EAAYE,IAEpC,IAAME,EAAcR,EAAiB,GACrCvH,QAAQC,IAAI8H,GACZC,OAAOC,QAAQF,GAAaxI,KAAI,YAAmB,IAAD,mBAC1C2I,EAAkB,CADwB,WAE1CC,EAAkBD,EAAgB,GAClCE,EAAuBF,EAAgB,GAC7ClI,QAAQC,IAAIkI,EAAiBC,UA9EjC,EAAK/G,MAAQ,CACX+F,cAAc,EACdD,0BAA0B,EAC1BkB,OAAQ,GACR1B,KAAM,KACNI,OAAQ,GACRF,YAAa,GACbG,SAAU,IATA,E,iFAgGO,IAAD,OAElBhJ,EAAKsK,oBAAmB,SAAC3B,GACnBA,GACF,EAAKrD,SAAS,CAAEqD,YAuBpB,IAAM4B,EAAoB,GACpBC,EAAY,GAClBC,EAAahB,GAAG,SAAS,SAACiB,GACtB,IAAMC,EAAYD,EAASd,MAC3B,IAAK,IAAIgB,KAAmBD,EACxBJ,EAAkBT,KAAKa,EAAUC,IAErC,IAAMC,EAAeN,EAAkB,GAEvCP,OAAOC,QAAQY,GAActJ,KAAI,YAAmB,IAAD,mBAE3CiC,EADmB,CADwB,WAElB,GAI/BgH,EAAUV,KAAK,CAAC1H,eAAgBoB,EAAMpB,eAAgBC,WAAYmB,EAAMnB,WAAYE,OAAQiB,EAAMjB,OAAQQ,MAAOS,EAAMT,MAAOJ,cAAea,EAAMb,cAAeC,SAAUY,EAAMZ,SAAUJ,SAAUgB,EAAMhB,SAAUC,YAAae,EAAMf,YAAaC,UAAWc,EAAMd,UAAWI,mBAAoBU,EAAMV,mBAAoBD,kBAAmBW,EAAMX,kBAAmBP,MAAOkB,EAAMlB,QAEzX,EAAKgD,SAAS,CACZ+E,OAAQG,Y,+BAShB,OACE,kBAAC,IAAM3J,SAAP,KACE,4BAAQL,UAAU,WAChB,yBAAKA,UAAU,iBACb,yBAAKwC,IAAKoF,IAAMnF,IAAI,GAAGxC,QAASC,KAAK2I,yBAEvC,yBAAK7I,UAAU,UACb,4BACE,wBAAIC,QAASC,KAAKyI,0BAAlB,oBAIN,0BAAM3I,UAAU,WACbE,KAAK2C,MAAM+F,aAAe,kBAAC,EAAD,CAAU7I,iBAAkBG,KAAKyI,2BAA+B,KAC1FzI,KAAK2C,MAAM8F,yBAA2B,kBAAC,EAAD,CAAajI,WAAYR,KAAK2C,MAAMgH,SAAa,MAGzF3J,KAAK2C,MAAM+F,aAAe,KAAO,kBAAC,EAAD,W,GAxKxBzI,aCCEmK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5F,SAAS6F,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.cdd9f75b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.61279179.png\";","module.exports = __webpack_public_path__ + \"static/media/sunIcon.10e41d71.svg\";","module.exports = __webpack_public_path__ + \"static/media/waterIcon.2c06fab6.svg\";","module.exports = __webpack_public_path__ + \"static/media/growthIcon.804353f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/repottingIcon.9cd78626.svg\";","module.exports = __webpack_public_path__ + \"static/media/propagateByCuttingIcon.024592f9.svg\";","module.exports = __webpack_public_path__ + \"static/media/toxicIcon.ca49177b.svg\";","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport '@firebase/firestore';\nimport '@firebase/auth';\nimport '@firebase/storage';\n\n  // Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA2jvrQtoLHRaf7MBBrw_MVbBvugHW2A-E\",\n    authDomain: \"urban-botany.firebaseapp.com\",\n    databaseURL: \"https://urban-botany.firebaseio.com\",\n    projectId: \"urban-botany\",\n    storageBucket: \"urban-botany.appspot.com\",\n    messagingSenderId: \"43720213145\",\n    appId: \"1:43720213145:web:7e64c7d6d097d91a5dee08\"\n};\n\n\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst dbRef = firebase.database().ref();\nexport const provider = new firebase.auth.GoogleAuthProvider();\nexport const auth = firebase.auth();\nexport const listOfPlants = dbRef.child(\"plants\");\nexport const users = dbRef.child(\"users\");\nexport const storage = firebase.storage();\n\nexport default dbRef;\n\n// 43720213145-hhovo34ble3cj3f8hvb4m8ff3387m32m.apps.googleusercontent.com\n// DtarT8RHGbx-eww54y8QVs-t","import React, { Component } from 'react';\nimport './sass/app.scss';\n\nclass Homepage extends Component {\n\n    sendDataToParent = () => {\n        this.props.searchPlantsProp();\n    }\n\n    render() {\n        // console.log(this.props);\n        return(\n            <section className=\"homepageContainer\">\n                <div className=\"headerContainer\">\n                    <h1>Keep your houseplants happy.</h1>\n                </div>\n                <div className=\"homepageCopyText\">\n                    <p>Our database contains care info on over 100 of the most common houseplants. Find your plant, save it to your collection, and look up care instructions whenever.</p>\n                    <button className=\"searchForAPlant\" onClick={this.sendDataToParent}>Search for a Plant</button>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default Homepage;","import React, { Component } from 'react';\nimport './sass/app.scss';\n\nclass PageNavigation extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"pageNavigation\">\n\n                    <div className=\"backArrow\">\n                        {this.props.currentPageProp === 1 ? <span className=\"greyedOutArrow\" onClick={this.props.previousPageFunction}><i className=\"fas fa-angle-double-left\"></i></span> : <span className=\"backArrowSpan\" onClick={this.props.previousPageFunction}><i className=\"fas fa-angle-double-left\"></i></span>}\n                    </div>\n\n                    <div className=\"forwardArrow\">\n                        {this.props.currentPageProp < Math.ceil(this.props.plantsProp.length / this.props.plantsPerPage) ? <span className=\"forwardArrowSpan\" onClick={this.props.nextPageProp}><i className=\"fas fa-angle-double-right\"></i></span> : <span className=\"greyedOutArrow\" onClick={this.props.nextPageProp}><i className=\"fas fa-angle-double-right\"></i></span>}\n\n                    </div>\n\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default PageNavigation;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport PageNavigation from \"./PageNavigation.js\";\n\nclass DisplayAllPlants extends Component {\n\n    render() {\n        return(\n            <React.Fragment>\n\n                    {\n                        this.props.plantsProp.map( (eachPlant, index) => {\n                            let totalNumberOfPlants = this.props.plantsProp.length;\n                            let currentPage = this.props.currentPageProp;\n                            let previousPage = this.props.previousPageProp;\n                            let plantsPerPage = this.props.plantsPerPageProp;\n                            let totalPages = Math.ceil(totalNumberOfPlants / plantsPerPage);\n                            console.log(totalNumberOfPlants, currentPage, plantsPerPage, totalPages);\n\n                            if ((index + 1) <= currentPage *  this.props.plantsPerPageProp && (index + 1) > previousPage * this.props.plantsPerPageProp) {\n                                return (\n                                    <div key={index} className=\"plantContainer\" onClick={ () => this.props.showThisPlantProp(eachPlant.scientificName, eachPlant.commonName, eachPlant.image, eachPlant.family, eachPlant.lowLight, eachPlant.mediumLight, eachPlant.highLight, eachPlant.wateringNeeds, eachPlant.humidity, eachPlant.maxGrowthInMetres, eachPlant.propagateByCutting, eachPlant.toxic)}>\n                                        <div className=\"plantImageContainer\">\n                                            <img src={eachPlant.image} alt=\"\" />\n                                        </div>\n                                        <h3>{eachPlant.scientificName}</h3>\n                                        <h4>{eachPlant.commonName}</h4>\n                                    </div>\n                                )\n                            }\n                        })\n                    } \n\n                <PageNavigation currentPageProp={this.props.currentPageProp} previousPageProp={this.props.previousPage} nextPageProp={this.props.nextPageFunction} previousPageFunction={this.props.previousPageFunction} greyOutArrowsFunction={this.props.greyOutArrowsFunction} plantsProp={this.props.plantsProp} plantsPerPage={this.props.plantsPerPageProp}>\n                </PageNavigation>\n\n            </React.Fragment>\n        )\n    }\n}\n\nexport default DisplayAllPlants;","import React, { Component } from \"react\";\nimport './sass/app.scss';\n\nclass SearchForSpecificPlant extends Component {\n    constructor() {\n        super();\n        this.state = {\n            plantsWithMatch: 0,\n        }\n    }\n\n    render() {\n        let counter = 0;\n                return(\n                <React.Fragment>\n                    {\n                        this.props.plantsProp.map( (plant, index) => {\n                            const lengthOfArray = this.props.plantsProp.length;\n                            const searchQuery = this.props.searchQueryProp;\n                            const plantCommonName = plant.commonName.toLowerCase();\n                            const plantScientificName = plant.scientificName.toLowerCase();\n                            if (plantCommonName.includes(searchQuery) === true || plantScientificName.includes(searchQuery) === true || plant.commonName.includes(searchQuery) === true || plant.scientificName.includes(searchQuery) === true) {\n                                counter = counter + 1;\n                                console.log(\"We found a match\");\n                                counter = counter + 1;\n                                console.log(counter);\n                                return(\n                                    <div key={index} className=\"plantContainer\" onClick={ () => this.props.showThisPlantProp(plant.scientificName, plant.commonName, plant.image, plant.family, plant.lowLight, plant.mediumLight, plant.highLight, plant.wateringNeeds, plant.humidity, plant.maxGrowthInMetres, plant.propagateByCutting, plant.toxic)}>\n                                        <div className=\"plantImageContainer\">\n                                            <img src={plant.image} alt=\"\" />\n                                        </div>\n                                        <h3>{plant.scientificName}</h3>\n                                        <h4>{plant.commonName}</h4>\n                                    </div>\n                                );\n                            };\n                            if (lengthOfArray === index + 1 && counter === 0) {\n                                return(\n                                    <h3>Our database does not have any info on the plant you searched. Please try again. You might get more accurate results if you search using the plant's scientific name.</h3>\n                                )\n                            }\n                            if (counter >= lengthOfArray) {\n                                this.props.goBackToAllPlantsProp();\n                            }\n                        })\n                    }\n\n                </React.Fragment>\n            )\n        }\n    }\n\nexport default SearchForSpecificPlant;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport sunIcon from \"./assets/sunIcon.svg\";\nimport waterIcon from \"./assets/waterIcon.svg\";\nimport growthIcon from \"./assets/growthIcon.svg\";\nimport repottingIcon from \"./assets/repottingIcon.svg\";\nimport propagateByCuttingIcon from \"./assets/propagateByCuttingIcon.svg\";\nimport toxicIcon from \"./assets/toxicIcon.svg\";\n\nclass InfoForSpecificPlant extends Component {\n    render() {\n        return(\n            <React.Fragment>\n                <h2 className=\"goBackToAllPlants\" onClick={this.props.goBackToAllPlantsProp}>Go Back To All Plants</h2>\n                    <div className=\"plantInfoContainer\">\n                        <div className=\"plantInfoImageContainer\">\n                            <img src={this.props.specificPlantImageProp} alt=\"\" />\n                        </div>\n                        <div className=\"plantInfoText\">\n                            <h3>{this.props.specificPlantScientificNameProp}</h3>\n                            <h4>{this.props.specificPlantCommonNameProp}</h4>\n                            <p>Family: {this.props.specificPlantFamilyProp}</p>\n                            <div className=\"infoGrid\">\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={sunIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Light Toleration</span>\n                                    {this.props.lowLightProp ? <span className=\"dataText\">Low Light</span> : null}\n                                    {this.props.mediumLightProp ? <span className=\"dataText\">Medium Light</span> : null}\n                                    {this.props.highLightProp ? <span className=\"dataText\">High Light</span> : null}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={waterIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Watering Frequency</span>\n                                    {this.props.wateringNeedsProp.includes(\"low\") ? <span className=\"dataText\">Every couple weeks</span> : null}\n                                    {this.props.wateringNeedsProp.includes(\"medium\") ? <span className=\"dataText\">Once a week</span> : null}\n                                    {this.props.wateringNeedsProp.includes(\"high\") ? <span className=\"dataText\">Every five days</span> : null}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={growthIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Max Growth</span>\n                                    {this.props.maxGrowthProp === 1 ? <span class=\"dataText\">{this.props.maxGrowthProp} metre</span> : <span class=\"dataText\">{this.props.maxGrowthProp} metres</span>}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={repottingIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Repotting</span>\n                                    {/* {this.props.maxGrowthProp === 1 ? <span class=\"dataText\">{this.props.maxGrowthProp} metre</span> : <span class=\"dataText\">{this.props.maxGrowthProp} metres</span>} */}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={propagateByCuttingIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Propagation</span>\n                                    {this.props.propagationProp ? <span class=\"dataText\">Propagate by cutting</span> : <span class=\"dataText\">Cannot be propagated by cutting</span>}\n                                </div>\n                                <div className=\"plantInfo\">\n                                    <div className=\"infoImage\"><img src={toxicIcon} alt=\"\" /></div>\n                                    <span className=\"dataTitle\">Toxicity</span>\n                                    {this.props.toxicProp ? <span class=\"dataText\">Toxic for pets</span> : <span class=\"dataText\">Safe for pets</span>}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default InfoForSpecificPlant;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport DisplayAllPlants from './DisplayAllPlants.js';\nimport dbRef from \"./firebase.js\";\nimport SearchForSpecificPlant from \"./SearchForSpecificPlant.js\";\nimport InfoForSpecificPlant from \"./InfoForSpecificPlant.js\";\n\nclass PlantSearch extends Component {\n    constructor() {\n        super();\n        this.state = {\n            showAllPlants: true,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            showInfoForSpecificPlant: false,\n            specificPlantScientificName: \"\",\n            specificPlantCommonName: \"\",\n            specificPlantImage: \"\",\n            specificPlantFamily: \"\",\n            toleratesLowLight: null, \n            toleratesMediumLight: null,\n            toleratesHighLight: null,\n            specificPlantWateringNeeds: \"\",\n            specificPlantHumidity: \"\",\n            specificPlantMaxGrowthInMetres: null,\n            canPropagateByCutting: null,\n            isToxic: null,\n            currentPage: 1,\n            previousPage: 0,\n            plantsPerPage: 9,\n        };\n    }\n\n    nextPage = () => {\n        let totalNumberOfPlants = this.props.plantsProp.length;\n        let plantsPerPage = this.state.plantsPerPage;\n        if (this.state.currentPage < Math.ceil(totalNumberOfPlants / plantsPerPage)) {\n            this.setState({\n                currentPage: this.state.currentPage + 1,\n                previousPage: this.state.previousPage + 1,\n            })\n            let elmnt = document.querySelector(\".searchBar\");\n            this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n        };\n    }\n\n    previousPage = () => {\n        if (this.state.currentPage !== 1) {\n            this.setState({\n                currentPage: this.state.currentPage - 1,\n                previousPage: this.state.previousPage -1,\n            })\n            let elmnt = document.querySelector(\".searchBar\");\n            this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n        } else {\n            this.setState({\n                currentPage: 1,\n                previousPage: 0,\n            })\n        }\n    }\n\n    getUserInput = (event) => {\n        this.setState({\n            userInput: event.target.value,\n        })\n    }\n\n    saveUserInput = (event) => {\n        event.preventDefault();\n        const searchQuery = this.state.userInput;\n        if (searchQuery !== \"\") {\n            console.log(searchQuery);\n            this.setState({\n                showAllPlants: false,\n                showSearchForASpecificPlant: true,\n                showInfoForSpecificPlant: false,\n            })\n        }\n    }\n\n    showThisPlant = (scientificName, commonName, image, family, lowLight, mediumLight, highLight, wateringNeeds, humidity, maxGrowthInMetres, propagateByCutting, toxic) => {\n        this.setState({\n            showInfoForSpecificPlant: true,\n            showAllPlants: false,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            specificPlantScientificName: scientificName,\n            specificPlantCommonName: commonName,\n            specificPlantImage: image,\n            specificPlantFamily: family,\n            toleratesLowLight: lowLight, \n            toleratesMediumLight: mediumLight,\n            toleratesHighLight: highLight,\n            specificPlantWateringNeeds: wateringNeeds,\n            specificPlantHumidity: humidity,\n            specificPlantMaxGrowthInMetres: maxGrowthInMetres,\n            canPropagateByCutting: propagateByCutting,\n            isToxic: toxic,\n        })\n        console.log(scientificName, commonName, image, family);\n        let elmnt = document.querySelector(\".searchBar\");\n        this.scrollTo(document.documentElement, elmnt.offsetTop, 600);\n    }\n\n    goBackToAllPlants = () => {\n        this.setState({\n            showInfoForSpecificPlant: false,\n            showAllPlants: true,\n            showSearchForASpecificPlant: false,\n            userInput: \"\",\n            specificPlantScientificName: \"\",\n            specificPlantCommonName: \"\",\n            specificPlantImage: \"\",\n            specificPlantFamily: \"\",\n        })\n    }\n\n    scrollTo = (element, to, duration) => {\n        if (duration <= 0) return;\n        const difference = to - element.scrollTop;\n        const perTick = difference / duration * 10;\n    \n        setTimeout( () => {\n            element.scrollTop = element.scrollTop + perTick;\n            if (element.scrollTop === to) return;\n            this.scrollTo(element, to, duration - 10);\n        }, 10);\n    }\n\n    render() {\n        console.log(dbRef);\n        return(\n            <React.Fragment>\n                <div className=\"plantSearchContainer\">\n                    <div className=\"plantSearchHeader\">\n                        <h1>Search for a Plant</h1>\n                        <p>The Urban Botany database contains care instructions for over 100 of the most common houseplants, so you know how to give your plant the optimal care it deserves. Simply search either by scientific name or by common name, and if we have care info for that plant we’ll share all of our knowledge with you. We also connect you to the Trefle database, which collects data from a variety of institutions like the USDA and the Kew Botanical Gardens. Even if we don’t have specific care instructions on the super cool rare plant you search, we’ll still be able to show you what data the scientific community has.</p>\n                    </div>\n                    <div className=\"searchBar\">\n                        <form onSubmit={this.saveUserInput}>\n                            <input type=\"text\" className=\"plantSearchInput\" id=\"plantQuery\" placeholder=\"Search for a Plant\" onChange={this.getUserInput}></input>\n                            <button type=\"submit\"><i className=\"fas fa-search\"></i></button>\n                        </form>\n                    </div>\n\n                    <div className=\"searchResults\">\n\n                        {this.state.showAllPlants ? <div className=\"displayAllPlantsContainer\"><div className=\"searchResultsHeader\"><h2>Displaying All Plants</h2></div><DisplayAllPlants plantsProp={this.props.plantsProp} showThisPlantProp={this.showThisPlant} plantsPerPageProp={this.state.plantsPerPage} currentPageProp={this.state.currentPage} previousPageProp={this.state.previousPage} totalNumberOfPagesProp={this.state.totalPages} nextPageFunction={this.nextPage} previousPageFunction={this.previousPage} greyOutArrowsFunction={this.greyOutArrows} /></div> : null}\n\n                        {this.state.showSearchForASpecificPlant ? <div className=\"displayAllPlantsContainer\"><div className=\"searchResultsHeader\"><h2>Displaying search results for {this.state.userInput}</h2></div><SearchForSpecificPlant searchQueryProp={this.state.userInput} plantsProp={this.props.plantsProp} showThisPlantProp={this.showThisPlant} goBackToAllPlantsProp={this.goBackToAllPlants} /></div> : null}\n\n\n                        {this.state.showInfoForSpecificPlant ? <InfoForSpecificPlant specificPlantScientificNameProp={this.state.specificPlantScientificName} specificPlantCommonNameProp={this.state.specificPlantCommonName} specificPlantImageProp={this.state.specificPlantImage} specificPlantFamilyProp={this.state.specificPlantFamily} goBackToAllPlantsProp={this.goBackToAllPlants} lowLightProp={this.state.toleratesLowLight} mediumLightProp={this.state.toleratesMediumLight} highLightProp={this.state.toleratesHighLight} wateringNeedsProp={this.state.specificPlantWateringNeeds} humidityProp={this.state.specificPlantHumidity} maxGrowthProp={this.state.specificPlantMaxGrowthInMetres} propagationProp={this.state.canPropagateByCutting} toxicProp={this.state.isToxic} / > : null}\n                    </div>\n\n                </div>\n            </React.Fragment>\n\n        ) \n    }\n};\n\nexport default PlantSearch;","import React, { Component } from 'react';\nimport './sass/app.scss';\nimport logo from \"./assets/logo.png\";\n\nclass Footer extends Component{\n\n    render() {\n        return(\n            <React.Fragment>\n                <footer>\n                    <div className=\"footerContainer wrapper\">\n\n                        <div className=\"footerTextContainer\">\n                            <div className=\"footerLogoContainer\">\n                                <img src={logo} alt=\"\"></img>\n                            </div>\n                            <div className=\"footerText\">\n                                <p>Urban Botany is a small web-based app built and designed by Sandy Pranjic using React, Firebase, and the Trefle.io API. It was built with the intention of encouraging others to take up caring for houseplants as a hobby in hopes of reigniting people’s connection to Mother Nature.</p>\n                            </div>\n                        </div>\n\n                    </div>\n                </footer>\n\n\n\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport { provider } from \"./firebase.js\";\nimport { auth } from \"./firebase.js\";\nimport './sass/app.scss';\nimport logo from \"./assets/logo.png\"\nimport Homepage from \"./Homepage.js\";\nimport PlantSearch from \"./PlantSearch.js\";\nimport listOfPlants from \"./firebase.js\";\nimport Footer from \"./Footer\";\nimport users from \"./firebase.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showHomepage: true,\n      showPlantSearchComponent: false,\n      plants: [],\n      user: null,\n      userId: \"\",\n      currentUser: \"\",\n      userName: \"\",\n    }\n  }\n\n  login = () => {\n    auth.signInWithPopup(provider) \n      .then((result) => {\n        const username = result.user;\n        console.log(result);\n        this.setState({\n          user: username\n        });\n        let user = auth.currentUser;\n        let uid;\n        let email;\n        if (user != null) {\n          uid = user.uid;\n          let displayName = user.displayName;\n          this.setState({\n            userId: uid,\n            userName: displayName,\n          })\n          // users.child(\"users\").child(displayName).setValue(uid);\n        }\n      });\n  }\n\n\n  logout  = () => {\n    auth.signOut()\n      .then(() => {\n        this.setState({\n          user: null,\n          userId: null,\n          currentUser: null,\n        });\n      });\n  }\n\n  showPlantSearchComponent = () => {\n    this.setState({\n      showPlantSearchComponent: true,\n      showHomepage: false,\n    });\n    // console.log(`Plant Search Component: ${this.state.showPlantSearchComponent}`);\n  }\n\n  showHomepageComponent = () => {\n    this.setState({\n      showPlantSearchComponent: false,\n      showHomepage: true,\n    });\n    // console.log(`Homepage Component: ${this.state.showPlantSearchComponent}`);\n  }\n\n  getUserInfo = () => {\n    const listOfUsersArray = [];\n    let counter = 0;\n    let listCounter = 0;\n    users.on(\"value\", (userData) => {\n      const listOfUsers = userData.val();\n      for (let eachUser in listOfUsers) {\n        console.log(eachUser);\n        listOfUsersArray.push(listOfUsers[eachUser]);\n      };\n      const usersObject = listOfUsersArray[1];\n      console.log(usersObject);\n      Object.entries(usersObject).map(([key, value]) => {\n        const innerDataObject = [key, value];\n        const databaseUserKey = innerDataObject[0];\n        const authenticationUserId = innerDataObject[1];\n        console.log(databaseUserKey, authenticationUserId);\n        // this.getThisUserInfo(authenticationUserId);\n        // if (authenticationUserId === this.state.userId) {\n        //   console.log(\"This user has already been added to the database.\");\n        // } else {\n        //   console.log(this.state.uid);\n          // const currentUserId = users.child(\"users\").push(this.state.userId);\n          // console.log(`the current user id is ${currentUserId}`);\n          // this.setState({\n          //   currentUser: currentUserId,\n          // })\n        }\n      )\n    })\n  }\n\n  componentDidMount() {\n\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } \n    });\n    \n    // const userId = this.state.userId;\n    // const dataToCheckForUser = [];\n    // listOfUsers.on(\"value\", (response) => {\n    //     const firebaseData = response.val();\n    //     for (let findUserId in firebaseData) {\n    //       dataToCheckForUser.push(firebaseData[findUserId]);\n    //     }\n    //     const dataObject = dataToCheckForUser[0];\n    //     Object.entries(dataObject).map(([key, value]) => {\n    //       // console.log(dataObject);\n    //       if (dataObject.includes(this.state.currentUserId)) {\n    //         console.log(\"We have this user\");\n    //       } else {\n    //         const listOfUsers.push(this.state.currentUserId);\n    //       }\n    //     }) \n    //   }\n    // )\n\n    const listOfPlantsArray = [];\n    const plantData = [];\n    listOfPlants.on(\"value\", (response) => {\n        const plantItem = response.val();\n        for (let individualPlant in plantItem) {\n            listOfPlantsArray.push(plantItem[individualPlant]);\n        }\n        const plantsObject = listOfPlantsArray[0];\n        // console.log(plantsObject);\n        Object.entries(plantsObject).map(([key, value]) => {\n          const innerPlantObject = [key, value];\n          const plant = innerPlantObject[1];\n\n          // console.log(`Common Name: ${plant.commonName}, Scientific Name: ${plant.scientificName}, Family: ${plant.family}`);\n\n          plantData.push({scientificName: plant.scientificName, commonName: plant.commonName, family: plant.family, toxic: plant.toxic, wateringNeeds: plant.wateringNeeds, humidity: plant.humidity, lowLight: plant.lowLight, mediumLight: plant.mediumLight, highLight: plant.highLight, propagateByCutting: plant.propagateByCutting, maxGrowthInMetres: plant.maxGrowthInMetres, image: plant.image});\n\n          this.setState({\n            plants: plantData\n          })\n        })\n      })\n  }\n\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"wrapper\">\n          <div className=\"logoContainer\">\n            <img src={logo} alt=\"\" onClick={this.showHomepageComponent}></img>\n          </div>\n          <nav className=\"topNav\">\n            <ul>\n              <li onClick={this.showPlantSearchComponent}>Search Plants</li>\n            </ul>\n          </nav>\n        </header>\n        <main className=\"wrapper\">\n          {this.state.showHomepage ? <Homepage searchPlantsProp={this.showPlantSearchComponent} /> : null}\n          {this.state.showPlantSearchComponent ? <PlantSearch plantsProp={this.state.plants} /> : null}\n        </main>\n\n        {this.state.showHomepage ? null : <Footer />}\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}